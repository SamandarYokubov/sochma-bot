import { logUserAction } from '../utils/logger.js';

/**
 * Handle /profile command
 */
export const profileHandler = async (ctx) => {
  try {
    const user = ctx.user;
    
    logUserAction(user.telegramId, 'profile_view', { userType: user.userType });

    const profileText = formatUserProfile(user);
    
    await ctx.reply(profileText, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úèÔ∏è Edit Profile', callback_data: 'profile_edit' },
            { text: 'üîÑ Change User Type', callback_data: 'profile_change_type' }
          ],
          [
            { text: 'üìä View Stats', callback_data: 'profile_stats' },
            { text: '‚öôÔ∏è Privacy Settings', callback_data: 'profile_privacy' }
          ],
          [
            { text: 'üîô Back to Menu', callback_data: 'main_menu' }
          ]
        ]
      }
    });
  } catch (error) {
    logUserAction(ctx.user?.telegramId, 'profile_view_error', { error: error.message });
    await ctx.reply('‚ùå Error loading profile. Please try again.');
  }
};

/**
 * Format user profile for display
 */
const formatUserProfile = (user) => {
  const profile = user.profile || {};
  const subscription = user.subscription || {};
  
  let text = `üë§ **${user.fullName}**\n\n`;
  
  // Basic info
  text += `üÜî **User ID:** ${user.telegramId}\n`;
  text += `üë• **Type:** ${user.userType}\n`;
  text += `üìÖ **Joined:** ${user.joinedAt.toLocaleDateString()}\n`;
  text += `üïí **Last Active:** ${user.lastActivity.toLocaleDateString()}\n\n`;
  
  // Profile details
  if (profile.company) text += `üè¢ **Company:** ${profile.company}\n`;
  if (profile.industry) text += `üè≠ **Industry:** ${profile.industry}\n`;
  if (profile.location) text += `üìç **Location:** ${profile.location}\n`;
  if (profile.experience) text += `üíº **Experience:** ${profile.experience}\n`;
  if (profile.investmentRange) text += `üí∞ **Investment Range:** ${profile.investmentRange}\n`;
  if (profile.bio) text += `üìù **Bio:** ${profile.bio}\n`;
  if (profile.website) text += `üåê **Website:** ${profile.website}\n`;
  if (profile.linkedin) text += `üíº **LinkedIn:** ${profile.linkedin}\n`;
  
  // Subscription info
  text += `\nüìä **Subscription:** ${subscription.plan || 'free'}\n`;
  if (subscription.expiresAt) {
    text += `‚è∞ **Expires:** ${subscription.expiresAt.toLocaleDateString()}\n`;
  }
  
  // Status
  text += `\n‚úÖ **Status:** ${user.status}\n`;
  if (user.verificationStatus?.isVerified) {
    text += `üîí **Verified:** Yes\n`;
  }
  
  return text;
};

/**
 * Handle profile edit
 */
export const handleProfileEdit = async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      `‚úèÔ∏è **Edit Profile**\n\n` +
      `What would you like to edit?`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üè¢ Company', callback_data: 'edit_company' },
              { text: 'üè≠ Industry', callback_data: 'edit_industry' }
            ],
            [
              { text: 'üìç Location', callback_data: 'edit_location' },
              { text: 'üíº Experience', callback_data: 'edit_experience' }
            ],
            [
              { text: 'üí∞ Investment Range', callback_data: 'edit_investment' },
              { text: 'üìù Bio', callback_data: 'edit_bio' }
            ],
            [
              { text: 'üåê Website', callback_data: 'edit_website' },
              { text: 'üíº LinkedIn', callback_data: 'edit_linkedin' }
            ],
            [
              { text: 'üîô Back to Profile', callback_data: 'profile_view' }
            ]
          ]
        }
      }
    );
  } catch (error) {
    logUserAction(ctx.user?.telegramId, 'profile_edit_error', { error: error.message });
    await ctx.answerCbQuery('‚ùå Error opening profile editor. Please try again.');
  }
};

/**
 * Handle user type change
 */
export const handleUserTypeChange = async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    await ctx.editMessageText(
      `üîÑ **Change User Type**\n\n` +
      `Current type: ${ctx.user.userType}\n\n` +
      `Select your new user type:`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üè¢ Investor', callback_data: 'change_type_investor' },
              { text: 'üõí Buyer', callback_data: 'change_type_buyer' }
            ],
            [
              { text: 'üîÑ Both', callback_data: 'change_type_both' },
              { text: '‚ùå None', callback_data: 'change_type_none' }
            ],
            [
              { text: 'üîô Back to Profile', callback_data: 'profile_view' }
            ]
          ]
        }
      }
    );
  } catch (error) {
    logUserAction(ctx.user?.telegramId, 'user_type_change_error', { error: error.message });
    await ctx.answerCbQuery('‚ùå Error changing user type. Please try again.');
  }
};

/**
 * Handle user type change confirmation
 */
export const handleUserTypeChangeConfirm = async (ctx) => {
  try {
    const newType = ctx.callbackQuery.data.split('_')[2];
    const user = ctx.user;
    
    const oldType = user.userType;
    user.userType = newType;
    await user.save();
    
    logUserAction(user.telegramId, 'user_type_changed', { 
      oldType, 
      newType 
    });
    
    await ctx.answerCbQuery(`‚úÖ User type changed to ${newType}!`);
    
    await ctx.editMessageText(
      `‚úÖ **User Type Updated**\n\n` +
      `Your user type has been changed from "${oldType}" to "${newType}".\n\n` +
      `This change will affect the features available to you and how others can find you in searches.`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üë§ View Profile', callback_data: 'profile_view' },
              { text: 'üîç Start Searching', callback_data: 'search_menu' }
            ]
          ]
        }
      }
    );
  } catch (error) {
    logUserAction(ctx.user?.telegramId, 'user_type_change_confirm_error', { error: error.message });
    await ctx.answerCbQuery('‚ùå Error updating user type. Please try again.');
  }
};

/**
 * Handle profile stats
 */
export const handleProfileStats = async (ctx) => {
  try {
    const user = ctx.user;
    
    await ctx.answerCbQuery();
    
    const stats = {
      accountAge: user.accountAge,
      lastActivity: user.lastActivity,
      profileCompleteness: calculateProfileCompleteness(user),
      verificationStatus: user.verificationStatus?.isVerified ? 'Verified' : 'Not Verified'
    };
    
    const statsText = `üìä **Profile Statistics**\n\n` +
      `üìÖ **Account Age:** ${stats.accountAge} days\n` +
      `üïí **Last Activity:** ${stats.lastActivity.toLocaleDateString()}\n` +
      `üìù **Profile Completeness:** ${stats.profileCompleteness}%\n` +
      `üîí **Verification:** ${stats.verificationStatus}\n` +
      `üë• **User Type:** ${user.userType}\n` +
      `üìä **Subscription:** ${user.subscription?.plan || 'free'}`;
    
    await ctx.editMessageText(statsText, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: 'üîô Back to Profile', callback_data: 'profile_view' }
          ]
        ]
      }
    });
  } catch (error) {
    logUserAction(ctx.user?.telegramId, 'profile_stats_error', { error: error.message });
    await ctx.answerCbQuery('‚ùå Error loading profile stats. Please try again.');
  }
};

/**
 * Calculate profile completeness percentage
 */
const calculateProfileCompleteness = (user) => {
  const profile = user.profile || {};
  const fields = [
    'company',
    'industry',
    'location',
    'experience',
    'bio',
    'website',
    'linkedin'
  ];
  
  const filledFields = fields.filter(field => profile[field] && profile[field].trim());
  return Math.round((filledFields.length / fields.length) * 100);
};

/**
 * Handle profile field editing
 */
export const handleProfileFieldEdit = async (ctx, field) => {
  try {
    await ctx.answerCbQuery();
    
    const fieldNames = {
      company: 'Company/Organization name',
      industry: 'Industry',
      location: 'Location',
      experience: 'Experience level',
      investment: 'Investment range',
      bio: 'Bio (max 500 characters)',
      website: 'Website URL',
      linkedin: 'LinkedIn profile URL'
    };
    
    await ctx.editMessageText(
      `‚úèÔ∏è **Edit ${fieldNames[field]}**\n\n` +
      `Current value: ${ctx.user.profile?.[field] || 'Not set'}\n\n` +
      `Please send me the new value, or type "skip" to keep the current value:`
    );
    
    // Set conversation state for field editing
    if (ctx.conversation) {
      ctx.conversation.state = 'profile_field_edit';
      ctx.conversation.data = { editingField: field };
      await ctx.conversation.save();
    }
  } catch (error) {
    logUserAction(ctx.user?.telegramId, 'profile_field_edit_error', { error: error.message });
    await ctx.answerCbQuery('‚ùå Error starting field edit. Please try again.');
  }
};
